generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  emailVerified Boolean?
  image         String?
  password      String? // Added password field
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  posts         Postre[]
  orders        Pedido[]
  favorites     Favorito[]
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Postre {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  size        String // Pequeño, Mediano, Grande, etc.
  ingredients Ingrediente[] @relation("PostreIngredientes")
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
  PedidoItem  PedidoItem[]
  Favorito    Favorito[]
}

model Ingrediente {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float // Precio adicional si aplica
  isAvailable Boolean  @default(true)
  postres     Postre[] @relation("PostreIngredientes")
}

model Pedido {
  id          Int          @id @default(autoincrement())
  userId      String
  status      String // Pendiente, En preparación, Enviado, Completado
  totalAmount Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  orderItems  PedidoItem[]
}

model PedidoItem {
  id       Int    @id @default(autoincrement())
  pedidoId Int
  postreId Int
  quantity Int
  price    Float
  postre   Postre @relation(fields: [postreId], references: [id])
  pedido   Pedido @relation(fields: [pedidoId], references: [id])
}

model Favorito {
  id        Int      @id @default(autoincrement())
  userId    String
  postreId  Int
  user      User     @relation(fields: [userId], references: [id])
  postre    Postre   @relation(fields: [postreId], references: [id])
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
